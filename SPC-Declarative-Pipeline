pipeline {
    agent { label 'node' }
    options { 
        timeout(time: 1, unit: 'HOURS')
        retry(2) 
    }
    parameters {
        choice(name: 'GOAL', choices: ['compile', 'package', 'clean package'])
    }
    stages {
        stage('Source Code') {
            steps {
                git url: 'https://github.com/GitPracticeRepo/spring-petclinic.git', 
                branch: 'main'
            }
        }
        // stage('Build the Code and sonarqube-analysis') {
        //     steps {
        //         withSonarQubeEnv('SONAR_LOCAL') {
        //             sh script: "mvn ${params.GOAL} sonar:sonar"
        //         }
        //     }
        // }
        // stage('reporting') {
        //     steps {
        //         junit testResults: 'target/surefire-reports/*.xml'
        //     }
        // }
        stage('Artifactory-Configuration'){
            steps{
                rtServer(
                id: 'spcconf',
                url: 'https://172.31.7.251:8082/artifactory',
                credentialsId: "JFROG"
                )
            }
        }
        stage('Artifactory-Deployer') {
            steps {
                rtMavenDeployer (
                    id: 'spc-deployer',
                    serverId: 'spcconf',
                    releaseRepo: 'jenkins2-libs-release-local',
                    snapshotRepo: 'jenkins2-libs-snapshot-local',
                    deployArtifacts: true
                )
            }
        }
        stage('Maven Run'){
            steps{
                rtMavenRun(
                    tool: 'maven',
                    pom: 'pom.xml',
                    goals: 'clean install',
                    deployerId: "spc-deployer",                    
                )
            }
        }
    }
}
